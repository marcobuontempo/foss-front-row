# BACKEND

## Database Structure:

1. User Table:
UserID (Primary Key)
Username (Unique)
Password (Hashed and Salted)

2. User Details Table:
UserID (Foreign Key referencing User Table)
FirstName
LastName
Email (Unique)
Phone
DOB
Address
AccountCreationDate
ProfilePicture (?)

3. Event Table:
EventID (Primary Key)
Title
Date
Venue

4. Ticket Table:
TicketID (Primary Key)
EventID (Foreign Key referencing Event Table)
Price
AvailableQuantity
TotalQuantity

5. Order Table:
OrderID (Primary Key)
UserID (Foreign Key referencing User Table)
EventID (Foreign Key referencing Event Table)
Tickets
TotalQuantity
TotalPrice
OrderDate


## RESTful Endpoints:

1. User Authentication:
DONE - POST /auth/login - User login.
DONE - POST /auth/register - User registration.
DONE - DELETE /auth/logout - User logout (generate invalid token to override existing).

2. User Operations:
DONE - PUT /users/{userID}/password - Update the password of a specific user (requires authentication).
DONE - DELETE /users/{userid} - Delete the details of a specific user (requires admin).

3. User Details Operations:
DONE - GET /userdetails - Retrieve a list of users (requires admin).
DONE - GET /usersdetails/{userID} - Retrieve details of a specific user (requires authentication).
DONE - PUT /userdetails/{userID} - Update the details of a specific user (requires authentication).

4. Event Operations:
DONE - GET /events - Retrieve a list of events.
DONE - GET /events/{eventID} - Retrieve details of a specific event.
DONE - POST /events - Create a new event (requires authentication).
DONE - PUT /events/{eventID} - Update details of a specific event (requires authentication).
DONE - DELETE /events/{eventID} - Delete a specific event (requires authentication).

5. Ticket Operations:
DONE - GET /events/{eventID}/tickets - Retrieve available tickets for a specific event.
DONE - GET /tickets/{ticketID} - Retrieve details of a specific ticket.
DONE - POST /events/{eventID}/tickets/order - Order tickets for a specific event (requires authentication).
DONE - PUT /tickets/{ticketID} - Update details of a specific ticket (requires authentication).
DONE - DELETE /tickets/{ticketID} - Delete a specific ticket (requires authentication).

6. Order Operations:
DONE - GET /orders - Retrieve a list of user orders (requires authentication).
DONE - GET /orders/{orderID} - Retrieve details of a specific order (requires authentication).
DONE - DELETE /orders/{orderID} - Cancel a specific order (requires authentication).

## Other
1. Date saved to mongo is in datetime format. Only accepts mm/dd/yyyy format. And due to timezone difference, the DOB will be adjusted to the wrong day (as it may go back 10 hours to adjust for difference, which is obviously unintended)
2. Implement mongo transactions to avoid race conditions and database issues. *Requires a replica or cluster mongo setup => use a suitable docker-compose
3. Generate API Documentation (Swagger?)




# FRONTEND

## ...
DONE - Rename .eventid to .event in getUserOrders() (or rename eventid, userid, etc. in all models to event & user instead)
DONE - Check ticket uid when checking in
DONE - Group events in frontend cart
DONE - Create 'My Orders' page, to display a list of orders
- Create a /user/tickets (?) endpoint to retrieve a list of all user tickets. Update frontend to fetch accordingly (for generateTicket), instead of having to calculate from orders list
- Update redux selector for auth => selectAuth , and deconstruct {} to get variables (instead of an individual select for each variable)
- Allow event time to be saved when creating the event (frontend -> unix -> backend -> server datetime)
- Cart qty count on navbar


# OTHER TODO
- Restrict, using backend, which fields can be updated in PUT - /userdetails
- Confirmations for buttons, e.g. logout, reserve ticket, etc.
- Modal for event successes
- Add types to redux reducer actions
- Toast notifications for success/fail requests
- Setup mongo replica set -> create a docker-compose image to do this -> implement transactions on backend where required
- Add admin panel actions