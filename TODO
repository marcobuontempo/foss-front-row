# BACKEND

## Database Structure:

1. User Table:
UserID (Primary Key)
Username (Unique)
Password (Hashed and Salted)

2. User Details Table:
UserID (Foreign Key referencing User Table)
FirstName
LastName
Email (Unique)
Phone
DOB
Address
AccountCreationDate
ProfilePicture (?)

3. Event Table:
EventID (Primary Key)
Title
Date
Venue

4. Ticket Table:
TicketID (Primary Key)
EventID (Foreign Key referencing Event Table)
Price
AvailableQuantity
TotalQuantity

5. Order Table:
OrderID (Primary Key)
UserID (Foreign Key referencing User Table)
EventID (Foreign Key referencing Event Table)
Tickets
TotalQuantity
TotalPrice
OrderDate


## RESTful Endpoints:

1. User Authentication:
DONE - POST /auth/login - User login.
DONE - POST /auth/register - User registration.
DONE - DELETE /auth/logout - User logout (generate invalid token to override existing).

2. User Operations:
DONE - PUT /users/{userID}/password - Update the password of a specific user (requires authentication).
DONE - DELETE /users/{userid} - Delete the details of a specific user (requires admin).

3. User Details Operations:
DONE - GET /userdetails - Retrieve a list of users (requires admin).
DONE - GET /usersdetails/{userID} - Retrieve details of a specific user (requires authentication).
DONE - PUT /userdetails/{userID} - Update the details of a specific user (requires authentication).

4. Event Operations:
DONE - GET /events - Retrieve a list of events.
DONE - GET /events/{eventID} - Retrieve details of a specific event.
DONE - POST /events - Create a new event (requires authentication).
DONE - PUT /events/{eventID} - Update details of a specific event (requires authentication).
DONE - DELETE /events/{eventID} - Delete a specific event (requires authentication).

5. Ticket Operations:
DONE - GET /events/{eventID}/tickets - Retrieve available tickets for a specific event.
DONE - GET /tickets/{ticketID} - Retrieve details of a specific ticket.
DONE - POST /events/{eventID}/tickets/order - Order tickets for a specific event (requires authentication).
DONE - PUT /tickets/{ticketID} - Update details of a specific ticket (requires authentication).
DONE - DELETE /tickets/{ticketID} - Delete a specific ticket (requires authentication).

6. Order Operations:
DONE - GET /orders - Retrieve a list of user orders (requires authentication).
DONE - GET /orders/{orderID} - Retrieve details of a specific order (requires authentication).
DONE - DELETE /orders/{orderID} - Cancel a specific order (requires authentication).


## Other
1. Date saved to mongo is in datetime format. Only accepts mm/dd/yyyy format. And due to timezone difference, the DOB will be adjusted to the wrong day (as it may go back 10 hours to adjust for difference, which is obviously unintended)
2. Implement mongo transactions to avoid race conditions and database issues. *Requires a replica or cluster mongo setup => use a suitable docker-compose
3. Generate API Documentation (Swagger?)




# FRONTEND

## ...
DONE - Add /events route
DONE - Change ProtectedRouterProvider to /router and extract routes object into own file
DONE - Link navbar to render conditionally from /router/routes array
DONE - Create 'Events' landing page
DONE - Create 'Create Event' form
DONE - Create individual 'Event' information pages
DONE - Create cart. including redux slices (cart, ticketsToAddToCart)
DONE - Change event tickets display to be simple inline, with 'Add to Cart' button
DONE - Create Cart page
DONE - Persist Cart with localStorage, and load on application start
DONE - Navlinks in profile, to toggle between account details, orders, settings, etc.
DONE - Navlinks in Events, for create event, my events
DONE - Create 'Order Tickets' page
DONE - Add ability to search (or filter) events
- 'Manage Events' from EventsPage (edit/delete my events)
- Create 'Ticket Scanning' option for 'My Events'
- Add ability to add x tickets to cart (incl. max price and seat type, from dropdown -> dropdown generated from fetched tickets)
- Group events in frontend cart
- Create 'My Orders' page, to display a list of orders
- Create 'My Tickets' page, to display a list of purchased tickets
- Update redux selector for auth => selectAuth , and deconstruct {} to get variables (instead of an individual select for each variable)



# OTHER TODO
- Restrict, using backend, which fields can be updated in PUT - /userdetails
- Confirmations for buttons, e.g. logout, reserve ticket, etc.
- Add types to redux reducer actions
- Change to MaterialUI