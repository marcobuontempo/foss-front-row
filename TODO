# BACKEND

## Database Structure:

1. User Table:
UserID (Primary Key)
Username (Unique)
Password (Hashed and Salted)

2. User Details Table:
UserID (Foreign Key referencing User Table)
FirstName
LastName
Email (Unique)
Phone
DOB
Address
AccountCreationDate
ProfilePicture (?)

3. Event Table:
EventID (Primary Key)
Title
Date
Venue

4. Ticket Table:
TicketID (Primary Key)
EventID (Foreign Key referencing Event Table)
Price
AvailableQuantity
TotalQuantity

5. Order Table:
OrderID (Primary Key)
UserID (Foreign Key referencing User Table)
EventID (Foreign Key referencing Event Table)
Tickets
TotalQuantity
TotalPrice
OrderDate


## RESTful Endpoints:

1. User Authentication:
DONE - POST /auth/login - User login.
DONE - POST /auth/register - User registration.
DONE - DELETE /auth/logout - User logout (generate invalid token to override existing).

2. User Operations:
DONE - PUT /users/{userID}/password - Update the password of a specific user (requires authentication).
DONE - DELETE /users/{userid} - Delete the details of a specific user (requires admin).

3. User Details Operations:
DONE - GET /userdetails - Retrieve a list of users (requires admin).
DONE - GET /usersdetails/{userID} - Retrieve details of a specific user (requires authentication).
DONE - PUT /userdetails/{userID} - Update the details of a specific user (requires authentication).

4. Event Operations:
DONE - GET /events - Retrieve a list of events.
DONE - GET /events/{eventID} - Retrieve details of a specific event.
DONE - POST /events - Create a new event (requires authentication).
DONE - PUT /events/{eventID} - Update details of a specific event (requires authentication).
DONE - DELETE /events/{eventID} - Delete a specific event (requires authentication).

5. Ticket Operations:
DONE - GET /events/{eventID}/tickets - Retrieve available tickets for a specific event.
DONE - GET /tickets/{ticketID} - Retrieve details of a specific ticket.
DONE - POST /events/{eventID}/tickets/order - Order tickets for a specific event (requires authentication).
DONE - PUT /tickets/{ticketID} - Update details of a specific ticket (requires authentication).
DONE - DELETE /tickets/{ticketID} - Delete a specific ticket (requires authentication).

6. Order Operations:
DONE - GET /orders - Retrieve a list of user orders (requires authentication).
DONE - GET /orders/{orderID} - Retrieve details of a specific order (requires authentication).
DONE - DELETE /orders/{orderID} - Cancel a specific order (requires authentication).


# FRONTEND
- Modal for event successes (Edit Event, Create Event, Scan Ticket)
- Toast notifications for fail requests
- Expired JWT -> modal 'You have been logged out - expired session' -> instead of immediate redirect
- Confirmations for buttons, e.g. logout, reserve ticket, etc.
- Add admin panel actions
- Logos
- Styling
- Cart qty count on navbar
- /logout page -> verify that redux values are cleared


# BACKEND
DONE

# DATABASE
- Setup mongo replica set -> create a docker-compose image to do this (lock the mongo version) -> implement transactions on backend where required


# Other
- Name project
- Generate API Documentation (Swagger?)
- Lock npm versions
- README